generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  password        String
  slug            String            @unique
  cpf             BigInt?           @unique
  birthDate       DateTime
  genre           String
  country         String
  status          Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  phoneNumber     BigInt?           @unique
  likes           Likes[]
  follows         Follows[]         @relation("UserFollows")
  followedBy      Follows[]         @relation("FollowedUser")
  downloads       String?
  playlists       Playlist[]        @relation("UserPlaylists")
  playlistLikes   PlaylistLike[]
  PlaybackHistory PlaybackHistory[]

  @@map("user")
}

model Artist {
  id         String        @id @default(cuid())
  name       String
  slug       String        @unique
  followedBy Follows[]     @relation("FollowedArtist")
  albums     ArtistAlbum[]

  @@map("artist")
}

model Album {
  id          String        @id @default(cuid())
  name        String
  type        String
  pathCover   String
  releaseDate DateTime
  country     String
  songs       Song[]
  artists     ArtistAlbum[]
  deletedAt   DateTime?

  @@map("album")
}

model Song {
  id              String            @id @default(cuid())
  isrc            String            @unique
  name            String
  description     String?
  composition     String
  production      String?
  source          String?
  albumId         String
  pathSong        String
  releaseDate     DateTime          @default(now())
  country         String
  duration        Int
  features        String
  album           Album?            @relation(fields: [albumId], references: [id])
  genres          SongGenre[]
  likes           Likes[]
  playlistSongs   PlaylistSong[]
  deletedAt       DateTime?
  PlaybackHistory PlaybackHistory[]

  @@map("song")
}

model Genre {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  songGenres  SongGenre[]

  @@map("genre")
}

model Playlist {
  id            String         @id @default(cuid())
  userId        String         @unique
  name          String
  isPublic      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  description   String?
  deletedAt     DateTime?
  user          User?          @relation("UserPlaylists", fields: [userId], references: [id])
  songs         PlaylistSong[]
  playlistLikes PlaylistLike[]

  @@map("playlist")
}

model Follows {
  id             String   @id @default(cuid())
  followerId     String
  followedId     String
  followedType   String
  createdAt      DateTime @default(now())
  follower       User     @relation("UserFollows", fields: [followerId], references: [id])
  followedUser   User?    @relation("FollowedUser", fields: [followedId], references: [id])
  followedArtist Artist?  @relation("FollowedArtist", fields: [followedId], references: [id])

  @@unique([followerId, followedId, followedType])
  @@map("follows")
}

model ArtistAlbum {
  artistId String
  albumId  String
  artist   Artist @relation(fields: [artistId], references: [id])
  album    Album  @relation(fields: [albumId], references: [id])

  @@id([artistId, albumId])
  @@unique([artistId, albumId])
  @@map("artistalbum")
}

model Likes {
  userId String
  songId String
  user   User   @relation(fields: [userId], references: [id])
  song   Song   @relation(fields: [songId], references: [id])

  @@id([userId, songId])
  @@unique([userId, songId])
  @@map("likes")
}

model SongGenre {
  songId  String
  genreId String
  song    Song   @relation(fields: [songId], references: [id])
  genre   Genre  @relation(fields: [genreId], references: [id])

  @@id([songId, genreId])
  @@unique([songId, genreId])
  @@map("songgenre")
}

model PlaylistSong {
  playlistId String
  songId     String
  addedAt    DateTime @default(now())
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  song       Song     @relation(fields: [songId], references: [id])

  @@id([playlistId, songId])
  @@unique([playlistId, songId])
  @@map("playlistsong")
}

model PlaylistLike {
  userId     String
  playlistId String
  likedAt    DateTime  @default(now())
  user       User?     @relation(fields: [userId], references: [id])
  playlist   Playlist? @relation(fields: [playlistId], references: [id])

  @@id([userId, playlistId])
  @@unique([userId, playlistId])
  @@map("playlistlike")
}

model PlaybackHistory {
  id          String   @id @default(cuid())
  userId      String   @unique
  songId      String
  currentTime Int
  playedAt    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  song        Song     @relation(fields: [songId], references: [id])

  @@unique([userId, songId])
  @@map("playback_history")
}
